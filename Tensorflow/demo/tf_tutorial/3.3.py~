#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# In[1]:
import tensorflow as tf
from numpy.random import RandomState

# #### 1. 定义神经网络的参数，输入和输出节点。
# In[2]:
batch_size = 8;
w1= tf.Variable(tf.random_normal([2, 3], stddev=1, seed=1));
w2= tf.Variable(tf.random_normal([3, 1], stddev=1, seed=1));
x = tf.placeholder(tf.float32, shape=(None, 2), name="x-input");
y_= tf.placeholder(tf.float32, shape=(None, 1), name='y-input');

# #### 2. 定义前向传播过程，损失函数及反向传播算法。
# In[3]:
a = tf.matmul(x, w1);
y = tf.matmul(a, w2);
y = tf.sigmoid(y);
#定义交叉商衡量预测值与实际值的接近程度．
#tf.reduce_mean(x[,flag]);求均值，对于二维数组，如果没有flag参数，计算所有元素均值；flag=0，计算每列均值；flag=1，计算每行均值.
#tf.clip_by_value(...);上下阈值处理
cross_entropy = -tf.reduce_mean(y_ * tf.log(tf.clip_by_value(y, 1e-10, 1.0))
                                + (1 - y_) * tf.log(tf.clip_by_value(1 - y, 1e-10, 1.0)));
#随机优化方法：学习率=0.001;损失函数＝交叉商
train_step = tf.train.AdamOptimizer(0.001).minimize(cross_entropy);

# ####  3. 生成模拟数据集。
# In[4]:
rdm = RandomState(1);
X = rdm.rand(128,2);
Y = [[int(x1+x2 < 1)] for (x1, x2) in X];

# #### 4. 创建一个会话来运行TensorFlow程序。
# In[5]:
with tf.Session() as sess:
    #初始化所有变量
    init_op = tf.global_variables_initializer();
    sess.run(init_op);    
    # 输出目前（未经训练）的参数取值。
    print(sess.run(w1));
    print(sess.run(w2));
    print("\n");
    
    # 训练模型。
    STEPS = 5000
    for i in range(STEPS):
        #计算batch起止序号
        start = (i*batch_size) % 128;
        end = (i*batch_size) % 128 + batch_size;
        #训练
        sess.run([train_step, y, y_], feed_dict={x: X[start:end], y_: Y[start:end]});
        if i % 100 == 0:
            #计算交叉商
            total_cross_entropy = sess.run(cross_entropy, feed_dict={x: X, y_: Y});
            print("After %d training step(s), cross entropy on all data is %g" % (i, total_cross_entropy));
    
    # 输出训练后的参数取值。
    print("\n");
    print(sess.run(w1));
    print(sess.run(w2));

