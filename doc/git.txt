git配置及使用指南
==============================
    GitHub官网:http://github.com
    https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

-----------------------------
知识点：
所有的版本控制系统，只能跟踪文本文件的改动！


-----------------------------
git安装
    $sudo apt-get install git

-----------------------------
GitHub访问配置
第1步:创建空版本库
    $mkdir learngit
    $cd learngit
    $git init

第2步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ssh-keygen -t rsa -C "wilsonwong@126.com"
hjw@hjw:~/work/temp/learngit$ ssh-keygen -t rsa -C "wilsonwong@126.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/home/hjw/.ssh/id_rsa): 
Created directory '/home/hjw/.ssh'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/hjw/.ssh/id_rsa.
Your public key has been saved in /home/hjw/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:lvCEC8DGrLIVj4g9Yg1vt0j61KvONPVlegwlSFusLN4 wilsonwong@126.com
The key's randomart image is:
+---[RSA 2048]----+
| +.  ...         |
| .*.. +o         |
|.=++oo+...       |
|*.=*.= =o.       |
|o+=.*.o.So       |
|.. +.E..*        |
|  oo  .o o       |
|  o...  .        |
|  .+.            |
+----[SHA256]-----+

注意：密码为空！

第3步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

第4步: 登录GitHub，创建仓库 learngit

第5步:与远程服务器关联
    #origin为远程库默认名称，可以修改
    $ git remote add origin git@github.com:wilsonwong2014/learngit.git  

第6步:本地git配置
    hjw@hjw:~/work/temp/learngit$ git config --global user.email "wilsonwnog@126.com"
    hjw@hjw:~/work/temp/learngit$ git config --global user.name "wilsonwnog2014"


第7步:添加文件到版本库
    <readme.txt>
    Git is a version control system.
    Git is free software.
    1.把文件添加到仓库
        $git add readme.txt
    2.把文件提交到仓库
        $git commit -m "修改文字说明"

第8步:就可以把本地库的所有内容推送到远程库上：
    $ git push -u origin master


-----------------------------
git 修改状态查看
    $git status

-----------------------------
$ git diff readme.txt #查看文件修改状态

----------------------------
$ git log             #查看日志
----------------------------
$ git reset --hard HEAD^     #回退到上一个版本
$ git reset --hard HEAD^^    #回退到上上一个版本
$ git reset --hard HEAD~5    #回退到前5个版本
$ git reset --hard commit_id #回退到指定版本
    #commit_id可以由 "$ git log --pretty=oneline" 或 “git reflog” 查询

----------------------------
$ git checkout -- readme.txt #撤销修改,如果本地文件被删除，则从版本库下载恢复

---------------------------
$git rm readme.txt           #删除文件

----------------------------
$ git clone git@github.com:wilsonwong2014/learngit.git  #从远程库克隆到当前目录


===========================
分支管理
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

==========================
克隆指定分支
    $git clone -b <branch name> <repository>
    #例：
        $git clone -b dev1 git@github.com:wilsonwong2014/learngit.git
==========================
Git push 常见用法
    Git push
        在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。
    git push的一般形式为 git push <远程主机名> <本地分支名>  <远程分支名> ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名，
    第一个master是本地分支名，第二个master是远程分支名。
    1.1 git push origin master
        如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建
     1.2 git push origin ：refs/for/master 
　　      如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin --delete master
    1.3 git push origin
　　      如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 
    1.4 git push
　　      如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名
　   1.5 git push 的其他命令
　　      这几个常见的用法已足以满足我们日常开发的使用了，还有几个扩展的用法，如下：
　　　　（1） git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，
　　　　　　不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式
　　　　　　如果想更改设置，可以使用git config命令。git config --global push.default matching OR git config --global push.default simple；可以使用git config -l 查看配置
　　　　（2） git push --all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项
　　　　（3） git push --force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。
　　　　（4） git push origin --tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令
　1.6 关于 refs/for
　　// refs/for 的意义在于我们提交代码到服务器之后是需要经过code review 之后才能进行merge的，而refs/heads 不需要

=========================
多人协作模式
    master分支是主分支，因此要时刻与远程同步；
    dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
    bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
    feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

