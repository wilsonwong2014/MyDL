学习资料
    Docker	—	从入门到实践    docker_practice.pdf
测试范例：
  $docker run -it --rm --name tf_gpu_py3 --runtime=nvidia --mount type=bind,source=$HOME/MyDL,target=/MyDL tensorflow/tensorflow:latest-devel-gpu-py3
  $docker run -it --rm --name tf_gpu_py3 --runtime=nvidia --mount type=bind,source=$HOME/MyDL/books_examples/models-master,target=/tensorflow/models/ tensorflow/tensorflow:latest-devel-gpu-py3
  $docker run -it --rm --name tf_gpu_py3 --runtime=nvidia --mount type=bind,source=$HOME/MyDL/books_examples/models-master,target=/usr/local/lib/python3.5/dist-packages/tensorflow/models/ tensorflow/tensorflow:latest-devel-gpu-py3  

========================================================================================
安装Docker
  $ wget -qO- https://get.docker.com/ | sh
hjw@hjw:~$ wget -qO- https://get.docker.com/ | sh
# Executing docker install script, commit: 4957679
+ sudo -E sh -c apt-get update -qq >/dev/null
+ sudo -E sh -c apt-get install -y -qq apt-transport-https ca-certificates curl >/dev/null
+ sudo -E sh -c curl -fsSL "https://download.docker.com/linux/ubuntu/gpg" | apt-key add -qq - >/dev/null
+ sudo -E sh -c echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial edge" > /etc/apt/sources.list.d/docker.list
+ sudo -E sh -c apt-get update -qq >/dev/null
+ sudo -E sh -c apt-get install -y -qq --no-install-recommends docker-ce >/dev/null
+ sudo -E sh -c docker version
Client:
 Version:           18.09.1
 API version:       1.39
 Go version:        go1.10.6
 Git commit:        4c52b90
 Built:             Wed Jan  9 19:35:23 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          18.09.1
  API version:      1.39 (minimum version 1.12)
  Go version:       go1.10.6
  Git commit:       4c52b90
  Built:            Wed Jan  9 19:02:44 2019
  OS/Arch:          linux/amd64
  Experimental:     false
If you would like to use Docker as a non-root user, you should now consider
adding your user to the "docker" group with something like:

  sudo usermod -aG docker hjw

Remember that you will have to log out and back in for this to take effect!

WARNING: Adding a user to the "docker" group will grant the ability to run
         containers which can be used to obtain root privileges on the
         docker host.
         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface
         for more information.
  $ sudo usermod -aG docker hjw

  #测试
  $sudo docker run hello-world

========================================================================================
31/01/2019 19:26:49 
安装nvidia-docker
  https://github.com/NVIDIA/nvidia-docker
  Quickstart
  # If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers
  $docker volume ls -q -f driver=nvidia-docker | xargs -r -I{} -n1 docker ps -q -a -f volume={} | xargs -r docker rm -f
  $sudo apt-get purge -y nvidia-docker

  # Add the package repositories
  $curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \
    sudo apt-key add -
  $distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
  $curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \
    sudo tee /etc/apt/sources.list.d/nvidia-docker.list
  $sudo apt-get update

  # Install nvidia-docker2 and reload the Docker daemon configuration
  $sudo apt-get install -y nvidia-docker2
  $sudo pkill -SIGHUP dockerd

  # Test nvidia-smi with the latest official CUDA image
  $docker run --runtime=nvidia --rm nvidia/cuda:9.0-base nvidia-smi
Unable to find image 'nvidia/cuda:9.0-base' locally
9.0-base: Pulling from nvidia/cuda
7b722c1070cd: Pull complete 
5fbf74db61f1: Pull complete 
ed41cb72e5c9: Pull complete 
7ea47a67709e: Pull complete 
35400734fa04: Pull complete 
195acf8a5739: Pull complete 
127028f911f6: Pull complete 
Digest: sha256:157d05b8a9f3a26dce71c9e824d3fab769d77326f471d0143a236c37d278450d
Status: Downloaded newer image for nvidia/cuda:9.0-base
Thu Jan 31 19:39:21 2019       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 384.130                Driver Version: 384.130                   |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  GeForce GTX 108...  Off  | 00000000:65:00.0  On |                  N/A |
|  0%   44C    P8    16W / 250W |    446MiB / 11171MiB |      1%      Default |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID   Type   Process name                             Usage      |
|=============================================================================|
+-----------------------------------------------------------------------------+



===============================================================================
常用范例
------------------
*.获取帮助
 $docker COMMAND --help

-----------------
*.获取本地镜像列表
 $docker image ls
 $docker image ls ubun*
 #过滤
 $docker image ls -f since=mongo:3.2
 $docker image ls -f before=mongo:3.2
-----------------
*.获取本地镜像列表(含中间层)
 $docker image ls -a 

-----------------
*.获取当前容器列表
 $docker ps

-----------------
*.获取镜像
    docker	pull	[选项]	[Docker	Registry	地址[:端口号]/]仓库名[:标签]
    例：
        $docker	pull	ubuntu:16.04
----------------
*.运行容器
   $docker run -it --rm ubuntu:16.04 bash

---------------
*.查看镜像、容器、数据卷所占用的空间
  $docker system df

---------------
*.显示虚悬镜像
  $docker image ls -f dangling=true

---------------
*.删除本地镜像
 $docker image rm [选项] <镜像1> [<镜像2> ...]

---------------
*.进入容器，修改内容
  $docker exec

---------------
*.杀死容器
  $docker kill ContainerID

---------------
*.端口映射
  https://blog.csdn.net/chengxuyuanyonghu/article/details/76630617
  #docker -p [ip:]hostPort:ContainerPort Container
  $docker -d -p 1080:80 nginx
  #本地访问 http://localhost:1080

---------------
*.Docker-PS命令解析
  https://www.cnblogs.com/fuyuteng/p/8847331.html

---------------
Docker命令行参考(24) – docker ps列出容器
    https://www.centos.bz/2017/01/docker-ps-list-containers/
*.查看通过kill推出的容器
 $docker ps -a exited=137
*.过滤已成功退出的容器
 $docker ps -a exited=0
*.过滤运行容器 
 $docker ps -a status=running
*.过滤暂停的容器
 $docker ps -a status=paused
*.ancestor过滤器基于容器的镜像来匹配容器
 $docker ps -a ancestor=nginx

----------------
*.修改docker镜像和容器存储路径
    https://blog.csdn.net/qq_35510622/article/details/79139083
    https://blog.csdn.net/wenwenxiong/article/details/78728696
  docker默认路径: /var/lib/docker
  配置文件：      /etc/default/docker
  1.停止docker服务
    $service docker stop
  2.移动docker根目录到新位置
    $sudo mv /var/lib/docker /home/hjw/docker -r
  3.创建软链接
    $ln -s /home/hjw/docker /var/lib/docker
  4.启动docker服务
    $service docker start

-----
*.目录/文件挂载
  Docker数据持久之volume和bind mount
        https://blog.csdn.net/docerce/article/details/79265858
  目录挂载
      #docker run -it --mount type=bind,source=宿主目录,target=容器目录[,readonly] 镜像 命令 
      例：
        $docker run -it --rm --mount type=bind,source=$HOME/data,target=/data,readonly ubuntu bash
  文件挂载
      #docker run -it --mount type=bind,source=宿主文件,target=容器文件[,readonly] 镜像 命令 
      例：
        $docker run -it --rm --mount type=bind,source=$HOME/data.txt,target=/data.txt,readonly ubuntu bash
  多个目录挂载
      #docker run -it --mount type=bind,source=宿主目录,target=容器目录[,readonly] [--mount type=bind,source=宿主目录,target=容器目录[,readonly]] 镜像 命令 
      例：
        $docker run -it --rm --mount type=bind,source=$HOME/data1,target=/data1,readonly  --mount type=bind,source=$HOME/data2,target=/data2 ubuntu bash

------------
基于docker的服务器端使用jupyter notebook的方法
    https://blog.csdn.net/weixin_40008349/article/details/81135847

-----------
【docker】docker建立最简单最小的helloworld镜像
    https://blog.csdn.net/u012819339/article/details/80007919




